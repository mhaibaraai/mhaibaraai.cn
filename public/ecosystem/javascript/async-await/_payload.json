[{"data":1,"prerenderedAt":1591},["ShallowReactive",2],{"navigation":3,"docs-/ecosystem/javascript/async-await":290,"surround-/ecosystem/javascript/async-await":1589},[4,147,227],{"title":5,"description":6,"icon":7,"path":8,"stem":9,"children":10,"page":28},"语言与生态","按语言、框架与工具分类整理，聚焦实践要点与可复用知识。","i-lucide-folder-code","/ecosystem","0.ecosystem",[11,29,46,58,70,87,118,130],{"title":12,"description":13,"icon":14,"path":15,"stem":16,"children":17,"page":28},"JavaScript","JavaScript 基础语法、异步编程和框架使用。","i-tabler-brand-javascript","/ecosystem/javascript","0.ecosystem/0.javascript",[18,23],{"title":19,"path":20,"stem":21,"description":22},"异步编程","/ecosystem/javascript/async-await","0.ecosystem/0.javascript/async-await","深入理解 Promise 和 async/await 异步编程模式",{"title":24,"path":25,"stem":26,"description":27},"网络请求","/ecosystem/javascript/fetch","0.ecosystem/0.javascript/fetch","使用 fetch API 进行网络请求和数据交互",false,{"title":30,"description":31,"icon":32,"path":33,"stem":34,"children":35,"page":28},"样式技术","CSS 和预处理器的高级特性和最佳实践","i-mdi-palette-outline","/ecosystem/styles","0.ecosystem/1.styles",[36,41],{"title":37,"path":38,"stem":39,"description":40},"CSS 高级特性","/ecosystem/styles/css","0.ecosystem/1.styles/css","CSS 变量、Flexbox 响应式布局等现代 CSS 特性",{"title":42,"path":43,"stem":44,"description":45},"Sass 预处理器","/ecosystem/styles/sass","0.ecosystem/1.styles/sass","Sass 模块化、构建工具配置和弃用警告处理",{"title":47,"description":48,"icon":49,"path":50,"stem":51,"children":52,"page":28},"TypeScript","TypeScript 的类型系统、接口、泛型等内容。","i-tabler-brand-typescript","/ecosystem/typescript","0.ecosystem/2.typescript",[53],{"title":54,"path":55,"stem":56,"description":57},"全局变量","/ecosystem/typescript/declare-global","0.ecosystem/2.typescript/declare-global","在 TypeScript 中使用全局类型。",{"title":59,"description":60,"icon":61,"path":62,"stem":63,"children":64,"page":28},"Vue","Vue.js 框架及其生态系统的使用指南和最佳实践。","i-tabler-brand-vue","/ecosystem/vue","0.ecosystem/3.vue",[65],{"title":66,"path":67,"stem":68,"description":69},"踩坑笔记","/ecosystem/vue/issues","0.ecosystem/3.vue/issues","记录 Vue 开发过程中遇到的问题和解决方案。",{"title":71,"description":72,"icon":73,"path":74,"stem":75,"children":76,"page":28},"Vite","Vite 是一个现代化的构建工具，它提供了快速的开发体验和高效的构建性能。","i-tabler-brand-vite","/ecosystem/vite","0.ecosystem/4.vite",[77,82],{"title":78,"path":79,"stem":80,"description":81},"按需自动导入","/ecosystem/vite/auto-import","0.ecosystem/4.vite/auto-import","组件、API 和图标按需自动导入，简化代码并提升开发效率。",{"title":83,"path":84,"stem":85,"description":86},"Vite 资源导入","/ecosystem/vite/resources-import","0.ecosystem/4.vite/resources-import","Vite 提供了多种灵活的静态资源导入方式，无需手动管理文件路径。",{"title":88,"description":89,"icon":90,"path":91,"stem":92,"children":93,"page":28},"Nuxt","Nuxt 是一个基于 Vue 的通用框架，用于构建服务器端渲染 (SSR) 和静态站点应用程序。","i-tabler-brand-nuxt","/ecosystem/nuxt","0.ecosystem/5.nuxt",[94,99,103,108,113],{"title":95,"path":96,"stem":97,"description":98},"Copy Page","/ecosystem/nuxt/copy-page","0.ecosystem/5.nuxt/copy-page","为用户与 LLM 提供「干净的 Markdown 原文」，可直接复制或在新标签页查看。",{"title":66,"path":100,"stem":101,"description":102},"/ecosystem/nuxt/issues","0.ecosystem/5.nuxt/issues","记录 Nuxt 开发过程中遇到的问题和解决方案。",{"title":104,"path":105,"stem":106,"description":107},"Nuxt LLMs","/ecosystem/nuxt/llms","0.ecosystem/5.nuxt/llms","使用 nuxt-llms 生成 /llms.txt，并规范化站内链接以便 LLM 抓取。",{"title":109,"path":110,"stem":111,"description":112},"Nuxt SEO","/ecosystem/nuxt/nuxt-seo","0.ecosystem/5.nuxt/nuxt-seo","Nuxt SEO 实战配置指南",{"title":114,"path":115,"stem":116,"description":117},"Nuxt SSR + PM2 部署","/ecosystem/nuxt/ssr-pm2-deploy","0.ecosystem/5.nuxt/ssr-pm2-deploy","在 Ubuntu 上使用 PM2 集群模式部署 Nuxt SSR，并通过 Nginx（Docker）反向代理与 Cloudflare 前置加速。",{"title":119,"description":120,"icon":121,"path":122,"stem":123,"children":124,"page":28},"UI 组件库","常用的 UI 组件库。","i-lucide-library","/ecosystem/ui-libraries","0.ecosystem/6.ui-libraries",[125],{"title":126,"path":127,"stem":128,"description":129},"Element Plus","/ecosystem/ui-libraries/element-plus","0.ecosystem/6.ui-libraries/element-plus","在使用 Element Plus 组件库时遇到的常见问题及其解决方案。",{"title":131,"description":132,"icon":133,"path":134,"stem":135,"children":136,"page":28},"Java","记录我在 Java 与相关框架中的理解与踩坑，包括语言基础、JVM、并发、Spring、构建与测试等。","i-mdi-language-java","/ecosystem/java","0.ecosystem/7.java",[137,142],{"title":138,"path":139,"stem":140,"description":141},"全局依赖缓存位置","/ecosystem/java/global-cache","0.ecosystem/7.java/global-cache","说明 Maven 与 Gradle 全局依赖缓存位置",{"title":143,"path":144,"stem":145,"description":146},"安装 Java 与构建工具","/ecosystem/java/mac-install","0.ecosystem/7.java/mac-install","如何使用 Homebrew 在 macOS 上安装和管理多个 Java 版本。",{"title":148,"description":149,"icon":150,"path":151,"stem":152,"children":153,"page":28},"实践指南","从环境部署到平台开发的实践指南。","i-lucide-rocket","/guides","1.guides",[154,176,193,215],{"title":155,"description":156,"icon":157,"path":158,"stem":159,"children":160,"page":28},"环境部署","Docker、PostgreSQL 和 DigitalOcean 的部署指南。","i-lucide-server","/guides/deployment","1.guides/deployment",[161,166,171],{"title":162,"path":163,"stem":164,"description":165},"DigitalOcean","/guides/deployment/digitalocean","1.guides/deployment/digitalocean","DigitalOcean 使用指南",{"title":167,"path":168,"stem":169,"description":170},"Docker","/guides/deployment/docker","1.guides/deployment/docker","Docker 安装和使用指南",{"title":172,"path":173,"stem":174,"description":175},"PostgreSQL 部署","/guides/deployment/postgresql-guide","1.guides/deployment/postgresql-guide","使用 Docker Compose 部署 PostgreSQL",{"title":177,"description":178,"icon":179,"path":180,"stem":181,"children":182,"page":28},"操作系统","macOS 和 Linux 的环境配置。","i-lucide-laptop","/guides/os","1.guides/os",[183,188],{"title":184,"path":185,"stem":186,"description":187},"Linux","/guides/os/linux","1.guides/os/linux","Linux 常用命令、服务器管理、开发环境配置等",{"title":189,"path":190,"stem":191,"description":192},"macOS","/guides/os/macos","1.guides/os/macos","记录一次 Mac 环境配置",{"title":194,"description":195,"icon":196,"path":197,"stem":198,"children":199,"page":28},"平台开发","浙政钉和 iServer 等平台的开发实践。","i-lucide-tv-minimal","/guides/platforms","1.guides/platforms",[200,205,210],{"title":201,"path":202,"stem":203,"description":204},"浙政钉开发","/guides/platforms/dingtalk","1.guides/platforms/dingtalk","浙政钉开发实用技巧",{"title":206,"path":207,"stem":208,"description":209},"GitLab CI/CD 完全指南","/guides/platforms/gitlab-ci","1.guides/platforms/gitlab-ci","一份涵盖从入门、配置到问题排查的完整 CI/CD 实践文档，实现快速上手并高效利用自动化流水线。",{"title":211,"path":212,"stem":213,"description":214},"IServer 踩坑归集","/guides/platforms/iserver","1.guides/platforms/iserver","超图服务调用踩坑归集",{"title":216,"description":217,"icon":218,"path":219,"stem":220,"children":221,"page":28},"运行时环境","Node.js、Java 等运行时环境的配置和使用指南。","i-lucide-router","/guides/runtime","1.guides/runtime",[222],{"title":223,"path":224,"stem":225,"description":226},"Node","/guides/runtime/node","1.guides/runtime/node","Node 的配置和使用指南。",{"title":228,"description":229,"icon":230,"path":231,"stem":232,"children":233,"page":28},"工具集","开发过程中常用工具的配置和使用指南。","i-lucide-wrench","/tools","2.tools",[234,256,273],{"title":235,"description":236,"icon":237,"path":238,"stem":239,"children":240,"page":28},"IDE 编辑器","编辑器的配置和使用指南。","i-lucide-monitor","/tools/editors","2.tools/editors",[241,246,251],{"title":242,"path":243,"stem":244,"description":245},"Cursor","/tools/editors/.cursor","2.tools/editors/.cursor","Cursor 的使用、配置和插件指南",{"title":247,"path":248,"stem":249,"description":250},"IntelliJ IDEA","/tools/editors/idea","2.tools/editors/idea","在 macOS 上安装和配置 IntelliJ IDEA，优化你的 Java 开发环境。",{"title":252,"path":253,"stem":254,"description":255},"VS Code","/tools/editors/vscode","2.tools/editors/vscode","VS Code 的配置和使用指南。",{"title":257,"description":258,"icon":259,"path":260,"stem":261,"children":262,"page":28},"包管理器","Homebrew 和 pnpm 等包管理器的使用。","i-lucide-hammer","/tools/package-managers","2.tools/package-managers",[263,268],{"title":264,"path":265,"stem":266,"description":267},"Homebrew","/tools/package-managers/homebrew","2.tools/package-managers/homebrew","Homebrew 的配置和使用指南。",{"title":269,"path":270,"stem":271,"description":272},"Pnpm","/tools/package-managers/pnpm","2.tools/package-managers/pnpm","pnpm 的配置和使用指南。",{"title":274,"description":275,"icon":276,"path":277,"stem":278,"children":279,"page":28},"版本控制","Git 和 fnm 等版本控制工具的配置和使用。","i-lucide-git-branch","/tools/version-control","2.tools/version-control",[280,285],{"title":281,"path":282,"stem":283,"description":284},"Fnm","/tools/version-control/fnm","2.tools/version-control/fnm","fnm 的安装、配置、使用、常见问题等。",{"title":286,"path":287,"stem":288,"description":289},"Git","/tools/version-control/git","2.tools/version-control/git","Git 的配置、使用、常见问题等。",{"id":291,"title":19,"body":292,"description":22,"extension":1583,"head":1584,"links":1584,"meta":1585,"navigation":521,"ogImage":1584,"path":20,"schemaOrg":1584,"seo":1586,"sitemap":1587,"stem":21,"__hash__":1588},"docs/0.ecosystem/0.javascript/async-await.md",{"type":293,"value":294,"toc":1575},"minimark",[295,300,307,330,350,710,714,723,769,1041,1058,1061,1067,1071,1076,1288,1291,1307,1571],[296,297,299],"h2",{"id":298},"promise","Promise",[301,302,303,306],"p",{},[304,305,299],"code",{}," 是一个对象，代表一个尚未完成但最终会完成（或失败）的异步操作的结果。它有三种状态：",[308,309,310,318,324],"ul",{},[311,312,313,317],"li",{},[314,315,316],"strong",{},"Pending (进行中)",": 初始状态，既不是成功，也不是失败。",[311,319,320,323],{},[314,321,322],{},"Fulfilled (已成功)",": 意味着操作成功完成。",[311,325,326,329],{},[314,327,328],{},"Rejected (已失败)",": 意味着操作失败。",[331,332,333],"warning",{},[301,334,335,337,338,341,342,345,346,349],{},[304,336,299],{}," 的状态一旦从 ",[304,339,340],{},"Pending"," 变为 ",[304,343,344],{},"Fulfilled"," 或 ",[304,347,348],{},"Rejected","，就不可再改变。这确保了异步结果的稳定性和一致性。",[351,352,358],"pre",{"className":353,"code":354,"filename":355,"language":356,"meta":357,"style":357},"language-ts shiki shiki-themes material-theme-lighter github-light github-dark monokai","// 创建一个 Promise，模拟一个耗时 1 秒的异步操作\nconst myPromise = new Promise((resolve, reject) => {\n  console.log('Promise 开始执行')\n  setTimeout(() => {\n    // 模拟成功，并返回结果\n    resolve('操作成功')\n    // 以下调用将被忽略，因为 Promise 状态已确定\n    // reject('操作失败');\n  }, 1000)\n})\n\n// 使用 .then() 处理成功情况，.catch() 处理失败情况\nmyPromise\n  .then((result) => {\n    // result 的值是 '操作成功'\n    console.log(`成功: ${result}`)\n  })\n  .catch((error) => {\n    // 如果 Promise 被 reject，这里会执行\n    console.error(`失败: ${error}`)\n  })\n  .finally(() => {\n    // 无论成功还是失败，都会执行\n    console.log('Promise 执行完毕')\n  })\n","promise-demo.ts","ts","",[304,359,360,369,417,446,461,467,484,490,496,508,516,523,529,535,557,563,593,601,622,628,654,661,677,683,703],{"__ignoreMap":357},[361,362,365],"span",{"class":363,"line":364},"line",1,[361,366,368],{"class":367},"ss7Ak","// 创建一个 Promise，模拟一个耗时 1 秒的异步操作\n",[361,370,372,376,380,384,387,391,395,398,402,405,408,411,414],{"class":363,"line":371},2,[361,373,375],{"class":374},"srJo8","const",[361,377,379],{"class":378},"s91G_"," myPromise",[361,381,383],{"class":382},"sGXK2"," =",[361,385,386],{"class":382}," new",[361,388,390],{"class":389},"s_MOj"," Promise",[361,392,394],{"class":393},"ss--_","(",[361,396,394],{"class":397},"swvn1",[361,399,401],{"class":400},"sQgqH","resolve",[361,403,404],{"class":397},",",[361,406,407],{"class":400}," reject",[361,409,410],{"class":397},")",[361,412,413],{"class":374}," =>",[361,415,416],{"class":397}," {\n",[361,418,420,423,426,430,433,437,441,443],{"class":363,"line":419},3,[361,421,422],{"class":393},"  console",[361,424,425],{"class":397},".",[361,427,429],{"class":428},"sD0ED","log",[361,431,394],{"class":432},"squCx",[361,434,436],{"class":435},"siCPE","'",[361,438,440],{"class":439},"sLACW","Promise 开始执行",[361,442,436],{"class":435},[361,444,445],{"class":432},")\n",[361,447,449,452,454,457,459],{"class":363,"line":448},4,[361,450,451],{"class":428},"  setTimeout",[361,453,394],{"class":432},[361,455,456],{"class":397},"()",[361,458,413],{"class":374},[361,460,416],{"class":397},[361,462,464],{"class":363,"line":463},5,[361,465,466],{"class":367},"    // 模拟成功，并返回结果\n",[361,468,470,473,475,477,480,482],{"class":363,"line":469},6,[361,471,472],{"class":428},"    resolve",[361,474,394],{"class":432},[361,476,436],{"class":435},[361,478,479],{"class":439},"操作成功",[361,481,436],{"class":435},[361,483,445],{"class":432},[361,485,487],{"class":363,"line":486},7,[361,488,489],{"class":367},"    // 以下调用将被忽略，因为 Promise 状态已确定\n",[361,491,493],{"class":363,"line":492},8,[361,494,495],{"class":367},"    // reject('操作失败');\n",[361,497,499,502,506],{"class":363,"line":498},9,[361,500,501],{"class":397},"  },",[361,503,505],{"class":504},"sYThS"," 1000",[361,507,445],{"class":432},[361,509,511,514],{"class":363,"line":510},10,[361,512,513],{"class":397},"}",[361,515,445],{"class":393},[361,517,519],{"class":363,"line":518},11,[361,520,522],{"emptyLinePlaceholder":521},true,"\n",[361,524,526],{"class":363,"line":525},12,[361,527,528],{"class":367},"// 使用 .then() 处理成功情况，.catch() 处理失败情况\n",[361,530,532],{"class":363,"line":531},13,[361,533,534],{"class":393},"myPromise\n",[361,536,538,541,544,546,548,551,553,555],{"class":363,"line":537},14,[361,539,540],{"class":397},"  .",[361,542,543],{"class":428},"then",[361,545,394],{"class":393},[361,547,394],{"class":397},[361,549,550],{"class":400},"result",[361,552,410],{"class":397},[361,554,413],{"class":374},[361,556,416],{"class":397},[361,558,560],{"class":363,"line":559},15,[361,561,562],{"class":367},"    // result 的值是 '操作成功'\n",[361,564,566,569,571,573,575,578,581,585,587,589,591],{"class":363,"line":565},16,[361,567,568],{"class":393},"    console",[361,570,425],{"class":397},[361,572,429],{"class":428},[361,574,394],{"class":432},[361,576,577],{"class":435},"`",[361,579,580],{"class":439},"成功: ",[361,582,584],{"class":583},"slF1C","${",[361,586,550],{"class":393},[361,588,513],{"class":583},[361,590,577],{"class":435},[361,592,445],{"class":432},[361,594,596,599],{"class":363,"line":595},17,[361,597,598],{"class":397},"  }",[361,600,445],{"class":393},[361,602,604,606,609,611,613,616,618,620],{"class":363,"line":603},18,[361,605,540],{"class":397},[361,607,608],{"class":428},"catch",[361,610,394],{"class":393},[361,612,394],{"class":397},[361,614,615],{"class":400},"error",[361,617,410],{"class":397},[361,619,413],{"class":374},[361,621,416],{"class":397},[361,623,625],{"class":363,"line":624},19,[361,626,627],{"class":367},"    // 如果 Promise 被 reject，这里会执行\n",[361,629,631,633,635,637,639,641,644,646,648,650,652],{"class":363,"line":630},20,[361,632,568],{"class":393},[361,634,425],{"class":397},[361,636,615],{"class":428},[361,638,394],{"class":432},[361,640,577],{"class":435},[361,642,643],{"class":439},"失败: ",[361,645,584],{"class":583},[361,647,615],{"class":393},[361,649,513],{"class":583},[361,651,577],{"class":435},[361,653,445],{"class":432},[361,655,657,659],{"class":363,"line":656},21,[361,658,598],{"class":397},[361,660,445],{"class":393},[361,662,664,666,669,671,673,675],{"class":363,"line":663},22,[361,665,540],{"class":397},[361,667,668],{"class":428},"finally",[361,670,394],{"class":393},[361,672,456],{"class":397},[361,674,413],{"class":374},[361,676,416],{"class":397},[361,678,680],{"class":363,"line":679},23,[361,681,682],{"class":367},"    // 无论成功还是失败，都会执行\n",[361,684,686,688,690,692,694,696,699,701],{"class":363,"line":685},24,[361,687,568],{"class":393},[361,689,425],{"class":397},[361,691,429],{"class":428},[361,693,394],{"class":432},[361,695,436],{"class":435},[361,697,698],{"class":439},"Promise 执行完毕",[361,700,436],{"class":435},[361,702,445],{"class":432},[361,704,706,708],{"class":363,"line":705},25,[361,707,598],{"class":397},[361,709,445],{"class":393},[296,711,713],{"id":712},"asyncawait","Async/Await",[301,715,716,719,720,722],{},[304,717,718],{},"async/await"," 是基于 ",[304,721,299],{}," 的语法糖，它让异步代码看起来和同步代码一样直观易读。",[308,724,725,740],{},[311,726,727,733,734,736,737,739],{},[314,728,729,732],{},[304,730,731],{},"async"," 函数",": ",[304,735,731],{}," 关键字用于声明一个异步函数。该函数会隐式地返回一个 ",[304,738,299],{},"。",[311,741,742,733,748,750,751,753,754,756,757,759,760,762,763,756,765,768],{},[314,743,744,747],{},[304,745,746],{},"await"," 操作符",[304,749,746],{}," 关键字只能在 ",[304,752,731],{}," 函数内部使用，它会暂停函数的执行，等待一个 ",[304,755,299],{}," 被 ",[304,758,401],{},"，然后返回 ",[304,761,299],{}," 的结果。如果 ",[304,764,299],{},[304,766,767],{},"reject","，它会抛出异常。",[351,770,773],{"className":353,"code":771,"filename":772,"language":356,"meta":357,"style":357},"// 定义一个返回 Promise 的函数\nfunction delayedMessage(message, delay) {\n  return new Promise(resolve => setTimeout(() => resolve(message), delay))\n}\n\n// 使用 async/await 调用\nasync function greet() {\n  console.log('开始打招呼...')\n  try {\n    const message = await delayedMessage('你好，世界！', 2000)\n    console.log(message) // 2秒后输出: 你好，世界！\n  }\n  catch (error) {\n    console.error('打招呼时发生错误:', error)\n  }\n  finally {\n    console.log('打招呼流程结束。')\n  }\n}\n\ngreet()\n","async-await-demo.ts",[304,774,775,780,802,843,848,852,857,872,891,898,929,947,952,967,991,995,1002,1021,1025,1029,1033],{"__ignoreMap":357},[361,776,777],{"class":363,"line":364},[361,778,779],{"class":367},"// 定义一个返回 Promise 的函数\n",[361,781,782,785,788,790,793,795,798,800],{"class":363,"line":371},[361,783,784],{"class":374},"function",[361,786,787],{"class":428}," delayedMessage",[361,789,394],{"class":397},[361,791,792],{"class":400},"message",[361,794,404],{"class":397},[361,796,797],{"class":400}," delay",[361,799,410],{"class":397},[361,801,416],{"class":397},[361,803,804,808,810,812,814,816,818,821,823,825,827,830,832,834,836,838,840],{"class":363,"line":419},[361,805,807],{"class":806},"sRxSC","  return",[361,809,386],{"class":382},[361,811,390],{"class":389},[361,813,394],{"class":432},[361,815,401],{"class":400},[361,817,413],{"class":374},[361,819,820],{"class":428}," setTimeout",[361,822,394],{"class":432},[361,824,456],{"class":397},[361,826,413],{"class":374},[361,828,829],{"class":428}," resolve",[361,831,394],{"class":432},[361,833,792],{"class":393},[361,835,410],{"class":432},[361,837,404],{"class":397},[361,839,797],{"class":393},[361,841,842],{"class":432},"))\n",[361,844,845],{"class":363,"line":448},[361,846,847],{"class":397},"}\n",[361,849,850],{"class":363,"line":463},[361,851,522],{"emptyLinePlaceholder":521},[361,853,854],{"class":363,"line":469},[361,855,856],{"class":367},"// 使用 async/await 调用\n",[361,858,859,862,865,868,870],{"class":363,"line":486},[361,860,731],{"class":861},"sTNss",[361,863,864],{"class":374}," function",[361,866,867],{"class":428}," greet",[361,869,456],{"class":397},[361,871,416],{"class":397},[361,873,874,876,878,880,882,884,887,889],{"class":363,"line":492},[361,875,422],{"class":393},[361,877,425],{"class":397},[361,879,429],{"class":428},[361,881,394],{"class":432},[361,883,436],{"class":435},[361,885,886],{"class":439},"开始打招呼...",[361,888,436],{"class":435},[361,890,445],{"class":432},[361,892,893,896],{"class":363,"line":498},[361,894,895],{"class":806},"  try",[361,897,416],{"class":397},[361,899,900,903,906,908,911,913,915,917,920,922,924,927],{"class":363,"line":510},[361,901,902],{"class":374},"    const",[361,904,905],{"class":378}," message",[361,907,383],{"class":382},[361,909,910],{"class":806}," await",[361,912,787],{"class":428},[361,914,394],{"class":432},[361,916,436],{"class":435},[361,918,919],{"class":439},"你好，世界！",[361,921,436],{"class":435},[361,923,404],{"class":397},[361,925,926],{"class":504}," 2000",[361,928,445],{"class":432},[361,930,931,933,935,937,939,941,944],{"class":363,"line":518},[361,932,568],{"class":393},[361,934,425],{"class":397},[361,936,429],{"class":428},[361,938,394],{"class":432},[361,940,792],{"class":393},[361,942,943],{"class":432},") ",[361,945,946],{"class":367},"// 2秒后输出: 你好，世界！\n",[361,948,949],{"class":363,"line":525},[361,950,951],{"class":397},"  }\n",[361,953,954,957,960,962,964],{"class":363,"line":531},[361,955,956],{"class":806},"  catch",[361,958,959],{"class":432}," (",[361,961,615],{"class":393},[361,963,943],{"class":432},[361,965,966],{"class":397},"{\n",[361,968,969,971,973,975,977,979,982,984,986,989],{"class":363,"line":537},[361,970,568],{"class":393},[361,972,425],{"class":397},[361,974,615],{"class":428},[361,976,394],{"class":432},[361,978,436],{"class":435},[361,980,981],{"class":439},"打招呼时发生错误:",[361,983,436],{"class":435},[361,985,404],{"class":397},[361,987,988],{"class":393}," error",[361,990,445],{"class":432},[361,992,993],{"class":363,"line":559},[361,994,951],{"class":397},[361,996,997,1000],{"class":363,"line":565},[361,998,999],{"class":806},"  finally",[361,1001,416],{"class":397},[361,1003,1004,1006,1008,1010,1012,1014,1017,1019],{"class":363,"line":595},[361,1005,568],{"class":393},[361,1007,425],{"class":397},[361,1009,429],{"class":428},[361,1011,394],{"class":432},[361,1013,436],{"class":435},[361,1015,1016],{"class":439},"打招呼流程结束。",[361,1018,436],{"class":435},[361,1020,445],{"class":432},[361,1022,1023],{"class":363,"line":603},[361,1024,951],{"class":397},[361,1026,1027],{"class":363,"line":624},[361,1028,847],{"class":397},[361,1030,1031],{"class":363,"line":630},[361,1032,522],{"emptyLinePlaceholder":521},[361,1034,1035,1038],{"class":363,"line":656},[361,1036,1037],{"class":428},"greet",[361,1039,1040],{"class":393},"()\n",[1042,1043,1044],"tip",{},[301,1045,1046,1047,1050,1051,1053,1054,1057],{},"使用 ",[304,1048,1049],{},"try...catch"," 结构来处理 ",[304,1052,746],{}," 可能抛出的错误，这比 ",[304,1055,1056],{},".catch()"," 链式调用更符合传统同步代码的错误处理逻辑。",[296,1059,1060],{"id":1060},"并行与串行执行",[301,1062,1063,1064,1066],{},"借助 ",[304,1065,299],{}," 的能力，我们可以灵活控制多个异步操作的执行顺序。",[1068,1069,1070],"h3",{"id":1070},"串行执行",[301,1072,1046,1073,1075],{},[304,1074,746],{}," 可以轻松实现异步操作的串行执行，即一个操作完成后再开始下一个。",[351,1077,1080],{"className":353,"code":1078,"filename":1079,"language":356,"meta":357,"style":357},"async function serialTasks() {\n  console.time('serialTasks')\n  console.log('开始执行串行任务')\n\n  const result1 = await delayedMessage('任务1完成', 1000)\n  console.log(result1)\n\n  const result2 = await delayedMessage('任务2完成', 1000)\n  console.log(result2)\n\n  console.log('串行任务全部完成')\n  console.timeEnd('serialTasks') // 大约 2000ms\n}\n\nserialTasks()\n","serial-execution.ts",[304,1081,1082,1095,1115,1134,1138,1167,1182,1186,1214,1229,1233,1252,1274,1278,1282],{"__ignoreMap":357},[361,1083,1084,1086,1088,1091,1093],{"class":363,"line":364},[361,1085,731],{"class":861},[361,1087,864],{"class":374},[361,1089,1090],{"class":428}," serialTasks",[361,1092,456],{"class":397},[361,1094,416],{"class":397},[361,1096,1097,1099,1101,1104,1106,1108,1111,1113],{"class":363,"line":371},[361,1098,422],{"class":393},[361,1100,425],{"class":397},[361,1102,1103],{"class":428},"time",[361,1105,394],{"class":432},[361,1107,436],{"class":435},[361,1109,1110],{"class":439},"serialTasks",[361,1112,436],{"class":435},[361,1114,445],{"class":432},[361,1116,1117,1119,1121,1123,1125,1127,1130,1132],{"class":363,"line":419},[361,1118,422],{"class":393},[361,1120,425],{"class":397},[361,1122,429],{"class":428},[361,1124,394],{"class":432},[361,1126,436],{"class":435},[361,1128,1129],{"class":439},"开始执行串行任务",[361,1131,436],{"class":435},[361,1133,445],{"class":432},[361,1135,1136],{"class":363,"line":448},[361,1137,522],{"emptyLinePlaceholder":521},[361,1139,1140,1143,1146,1148,1150,1152,1154,1156,1159,1161,1163,1165],{"class":363,"line":463},[361,1141,1142],{"class":374},"  const",[361,1144,1145],{"class":378}," result1",[361,1147,383],{"class":382},[361,1149,910],{"class":806},[361,1151,787],{"class":428},[361,1153,394],{"class":432},[361,1155,436],{"class":435},[361,1157,1158],{"class":439},"任务1完成",[361,1160,436],{"class":435},[361,1162,404],{"class":397},[361,1164,505],{"class":504},[361,1166,445],{"class":432},[361,1168,1169,1171,1173,1175,1177,1180],{"class":363,"line":469},[361,1170,422],{"class":393},[361,1172,425],{"class":397},[361,1174,429],{"class":428},[361,1176,394],{"class":432},[361,1178,1179],{"class":393},"result1",[361,1181,445],{"class":432},[361,1183,1184],{"class":363,"line":486},[361,1185,522],{"emptyLinePlaceholder":521},[361,1187,1188,1190,1193,1195,1197,1199,1201,1203,1206,1208,1210,1212],{"class":363,"line":492},[361,1189,1142],{"class":374},[361,1191,1192],{"class":378}," result2",[361,1194,383],{"class":382},[361,1196,910],{"class":806},[361,1198,787],{"class":428},[361,1200,394],{"class":432},[361,1202,436],{"class":435},[361,1204,1205],{"class":439},"任务2完成",[361,1207,436],{"class":435},[361,1209,404],{"class":397},[361,1211,505],{"class":504},[361,1213,445],{"class":432},[361,1215,1216,1218,1220,1222,1224,1227],{"class":363,"line":498},[361,1217,422],{"class":393},[361,1219,425],{"class":397},[361,1221,429],{"class":428},[361,1223,394],{"class":432},[361,1225,1226],{"class":393},"result2",[361,1228,445],{"class":432},[361,1230,1231],{"class":363,"line":510},[361,1232,522],{"emptyLinePlaceholder":521},[361,1234,1235,1237,1239,1241,1243,1245,1248,1250],{"class":363,"line":518},[361,1236,422],{"class":393},[361,1238,425],{"class":397},[361,1240,429],{"class":428},[361,1242,394],{"class":432},[361,1244,436],{"class":435},[361,1246,1247],{"class":439},"串行任务全部完成",[361,1249,436],{"class":435},[361,1251,445],{"class":432},[361,1253,1254,1256,1258,1261,1263,1265,1267,1269,1271],{"class":363,"line":525},[361,1255,422],{"class":393},[361,1257,425],{"class":397},[361,1259,1260],{"class":428},"timeEnd",[361,1262,394],{"class":432},[361,1264,436],{"class":435},[361,1266,1110],{"class":439},[361,1268,436],{"class":435},[361,1270,943],{"class":432},[361,1272,1273],{"class":367},"// 大约 2000ms\n",[361,1275,1276],{"class":363,"line":531},[361,1277,847],{"class":397},[361,1279,1280],{"class":363,"line":537},[361,1281,522],{"emptyLinePlaceholder":521},[361,1283,1284,1286],{"class":363,"line":559},[361,1285,1110],{"class":428},[361,1287,1040],{"class":393},[1068,1289,1290],{"id":1290},"并行执行",[301,1292,1293,1294,1297,1298,1300,1301,1303,1304,1306],{},"当多个异步操作互不依赖时，使用 ",[304,1295,1296],{},"Promise.all()"," 可以让它们并行执行，从而提高效率。",[304,1299,1296],{}," 接收一个 ",[304,1302,299],{}," 数组，当所有 ",[304,1305,299],{}," 都成功时，它会返回一个包含所有结果的数组。",[351,1308,1311],{"className":353,"code":1309,"filename":1310,"language":356,"meta":357,"style":357},"async function parallelTasks() {\n  console.time('parallelTasks')\n  console.log('开始执行并行任务')\n\n  const tasks = [\n    delayedMessage('任务A完成', 1000),\n    delayedMessage('任务B完成', 1500)\n  ]\n\n  try {\n    const results = await Promise.all(tasks)\n    console.log('并行任务全部完成:', results) // ['任务A完成', '任务B完成']\n  }\n  catch (error) {\n    console.error('并行任务中出现错误:', error)\n  }\n\n  console.timeEnd('parallelTasks') // 大约 1500ms\n}\n\nparallelTasks()\n","parallel-execution.ts",[304,1312,1313,1326,1345,1364,1368,1380,1403,1423,1428,1432,1438,1463,1489,1493,1505,1528,1532,1536,1557,1561,1565],{"__ignoreMap":357},[361,1314,1315,1317,1319,1322,1324],{"class":363,"line":364},[361,1316,731],{"class":861},[361,1318,864],{"class":374},[361,1320,1321],{"class":428}," parallelTasks",[361,1323,456],{"class":397},[361,1325,416],{"class":397},[361,1327,1328,1330,1332,1334,1336,1338,1341,1343],{"class":363,"line":371},[361,1329,422],{"class":393},[361,1331,425],{"class":397},[361,1333,1103],{"class":428},[361,1335,394],{"class":432},[361,1337,436],{"class":435},[361,1339,1340],{"class":439},"parallelTasks",[361,1342,436],{"class":435},[361,1344,445],{"class":432},[361,1346,1347,1349,1351,1353,1355,1357,1360,1362],{"class":363,"line":419},[361,1348,422],{"class":393},[361,1350,425],{"class":397},[361,1352,429],{"class":428},[361,1354,394],{"class":432},[361,1356,436],{"class":435},[361,1358,1359],{"class":439},"开始执行并行任务",[361,1361,436],{"class":435},[361,1363,445],{"class":432},[361,1365,1366],{"class":363,"line":448},[361,1367,522],{"emptyLinePlaceholder":521},[361,1369,1370,1372,1375,1377],{"class":363,"line":463},[361,1371,1142],{"class":374},[361,1373,1374],{"class":378}," tasks",[361,1376,383],{"class":382},[361,1378,1379],{"class":432}," [\n",[361,1381,1382,1385,1387,1389,1392,1394,1396,1398,1400],{"class":363,"line":469},[361,1383,1384],{"class":428},"    delayedMessage",[361,1386,394],{"class":432},[361,1388,436],{"class":435},[361,1390,1391],{"class":439},"任务A完成",[361,1393,436],{"class":435},[361,1395,404],{"class":397},[361,1397,505],{"class":504},[361,1399,410],{"class":432},[361,1401,1402],{"class":397},",\n",[361,1404,1405,1407,1409,1411,1414,1416,1418,1421],{"class":363,"line":486},[361,1406,1384],{"class":428},[361,1408,394],{"class":432},[361,1410,436],{"class":435},[361,1412,1413],{"class":439},"任务B完成",[361,1415,436],{"class":435},[361,1417,404],{"class":397},[361,1419,1420],{"class":504}," 1500",[361,1422,445],{"class":432},[361,1424,1425],{"class":363,"line":492},[361,1426,1427],{"class":432},"  ]\n",[361,1429,1430],{"class":363,"line":498},[361,1431,522],{"emptyLinePlaceholder":521},[361,1433,1434,1436],{"class":363,"line":510},[361,1435,895],{"class":806},[361,1437,416],{"class":397},[361,1439,1440,1442,1445,1447,1449,1451,1453,1456,1458,1461],{"class":363,"line":518},[361,1441,902],{"class":374},[361,1443,1444],{"class":378}," results",[361,1446,383],{"class":382},[361,1448,910],{"class":806},[361,1450,390],{"class":389},[361,1452,425],{"class":397},[361,1454,1455],{"class":428},"all",[361,1457,394],{"class":432},[361,1459,1460],{"class":393},"tasks",[361,1462,445],{"class":432},[361,1464,1465,1467,1469,1471,1473,1475,1478,1480,1482,1484,1486],{"class":363,"line":525},[361,1466,568],{"class":393},[361,1468,425],{"class":397},[361,1470,429],{"class":428},[361,1472,394],{"class":432},[361,1474,436],{"class":435},[361,1476,1477],{"class":439},"并行任务全部完成:",[361,1479,436],{"class":435},[361,1481,404],{"class":397},[361,1483,1444],{"class":393},[361,1485,943],{"class":432},[361,1487,1488],{"class":367},"// ['任务A完成', '任务B完成']\n",[361,1490,1491],{"class":363,"line":531},[361,1492,951],{"class":397},[361,1494,1495,1497,1499,1501,1503],{"class":363,"line":537},[361,1496,956],{"class":806},[361,1498,959],{"class":432},[361,1500,615],{"class":393},[361,1502,943],{"class":432},[361,1504,966],{"class":397},[361,1506,1507,1509,1511,1513,1515,1517,1520,1522,1524,1526],{"class":363,"line":559},[361,1508,568],{"class":393},[361,1510,425],{"class":397},[361,1512,615],{"class":428},[361,1514,394],{"class":432},[361,1516,436],{"class":435},[361,1518,1519],{"class":439},"并行任务中出现错误:",[361,1521,436],{"class":435},[361,1523,404],{"class":397},[361,1525,988],{"class":393},[361,1527,445],{"class":432},[361,1529,1530],{"class":363,"line":565},[361,1531,951],{"class":397},[361,1533,1534],{"class":363,"line":595},[361,1535,522],{"emptyLinePlaceholder":521},[361,1537,1538,1540,1542,1544,1546,1548,1550,1552,1554],{"class":363,"line":603},[361,1539,422],{"class":393},[361,1541,425],{"class":397},[361,1543,1260],{"class":428},[361,1545,394],{"class":432},[361,1547,436],{"class":435},[361,1549,1340],{"class":439},[361,1551,436],{"class":435},[361,1553,943],{"class":432},[361,1555,1556],{"class":367},"// 大约 1500ms\n",[361,1558,1559],{"class":363,"line":624},[361,1560,847],{"class":397},[361,1562,1563],{"class":363,"line":630},[361,1564,522],{"emptyLinePlaceholder":521},[361,1566,1567,1569],{"class":363,"line":656},[361,1568,1340],{"class":428},[361,1570,1040],{"class":393},[1572,1573,1574],"style",{},"html pre.shiki code .ss7Ak, html code.shiki .ss7Ak{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit}html pre.shiki code .srJo8, html code.shiki .srJo8{--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic}html pre.shiki code .s91G_, html code.shiki .s91G_{--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2}html pre.shiki code .sGXK2, html code.shiki .sGXK2{--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672}html pre.shiki code .s_MOj, html code.shiki .s_MOj{--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic}html pre.shiki code .ss--_, html code.shiki .ss--_{--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2}html pre.shiki code .swvn1, html code.shiki .swvn1{--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2}html pre.shiki code .sQgqH, html code.shiki .sQgqH{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic}html pre.shiki code .sD0ED, html code.shiki .sD0ED{--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E}html pre.shiki code .squCx, html code.shiki .squCx{--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2}html pre.shiki code .siCPE, html code.shiki .siCPE{--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74}html pre.shiki code .sLACW, html code.shiki .sLACW{--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74}html pre.shiki code .sYThS, html code.shiki .sYThS{--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF}html pre.shiki code .slF1C, html code.shiki .slF1C{--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#F92672}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html pre.shiki code .sRxSC, html code.shiki .sRxSC{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit}html pre.shiki code .sTNss, html code.shiki .sTNss{--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672}",{"title":357,"searchDepth":371,"depth":371,"links":1576},[1577,1578,1579],{"id":298,"depth":371,"text":299},{"id":712,"depth":371,"text":713},{"id":1060,"depth":371,"text":1060,"children":1580},[1581,1582],{"id":1070,"depth":419,"text":1070},{"id":1290,"depth":419,"text":1290},"md",null,{},{"title":19,"description":22},{"loc":20},"Kb8xyH2fRB-AafMY89QOnPPI7aFfUwn-_b1W9XEdVGQ",[1584,1590],{"title":24,"path":25,"stem":26,"description":27,"children":-1},1756113719428]